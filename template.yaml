AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: CodePipeline for Serverless Portfolio using SAM

Globals:
  Function:
    Timeout: 30

Parameters:
  Env:
    Type: String
    Description: "Deployment environment (dev or prod)"
    Default: prod
    AllowedValues:
      - dev
      - prod
  S3Bucket:
    Type: String
    Description: "The S3 bucket name for storing packaged artifacts."
    Default: cobaemon-serverless-portfolio-prod-artifacts
  CodePipelineName:
    Type: String
    Description: "The CodePipeline pipeline name."
    Default: cobaemon-serverless-portfolio-pipeline
  FullRepositoryId:
    Type: String
    Description: "The full repository ID to use with your CodeConnections connection."
    Default: cobaemon/ServerlessPortfolio
  BranchName:
    Type: String
    Description: "The branch name to use with your CodeConnections connection."
    Default: main
  StackName:
    Type: String
    Description: "The CloudFormation stack name that you want to create or update."
    Default: cobaemon-serverless-portfolio-stack
  TemplatePath:
    Type: String
    Description: "The path in your source repository to the CloudFormation template file."
    Default: packaged.yaml
  AllowedOrigin:
    Type: AWS::SSM::Parameter::Value<String>
    Description: "The allowed origin for CORS and CSRF protection (e.g. https://example.com)"
    Default: /prod/portfolio/parameter/csrf_trusted_origins
  AllowedHosts:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /prod/portfolio/parameter/allowed_hosts
  HostedZoneId:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /portfolio/parameter/hostzoneid
    Description: "Route53 Hosted Zone ID for custom domain"

Conditions:
  IsProd: !Equals [ !Ref Env, prod ]

Mappings:
  EnvMapping:
    dev:
      SettingsModule: "config.settings.dev"
    prod:
      SettingsModule: "config.settings.prod"

Resources:
  DjangoFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CobaemonServerlessPortfolioFunction
      Handler: asgi_lambda.handler
      Runtime: python3.12
      CodeUri: ./
      Environment:
        Variables:
          DJANGO_SETTINGS_MODULE: !FindInMap [EnvMapping, !Ref Env, SettingsModule]
          DJANGO_SECRET_KEY: "{{resolve:secretsmanager:prod/portfolio/secret:SecretString:DJANGO_SECRET_KEY}}"
          EMAIL_HOST_USER: "{{resolve:secretsmanager:prod/portfolio/secret:SecretString:EMAIL_HOST_USER}}"
          EMAIL_HOST_PASSWORD: "{{resolve:secretsmanager:prod/portfolio/secret:SecretString:EMAIL_HOST_PASSWORD}}"
          GOOGLE_CLIENT_ID: "{{resolve:secretsmanager:prod/portfolio/secret:SecretString:GOOGLE_CLIENT_ID}}"
          GOOGLE_CLIENT_SECRET: "{{resolve:secretsmanager:prod/portfolio/secret:SecretString:GOOGLE_CLIENT_SECRET}}"
          GITHUB_CLIENT_ID: "{{resolve:secretsmanager:prod/portfolio/secret:SecretString:GITHUB_CLIENT_ID}}"
          GITHUB_CLIENT_SECRET: "{{resolve:secretsmanager:prod/portfolio/secret:SecretString:GITHUB_CLIENT_SECRET}}"
          ALLOWED_HOSTS: !Sub "{{resolve:ssm:/${Env}/portfolio/parameter/allowed_hosts}}"
          CSRF_TRUSTED_ORIGINS: !Sub "'${AllowedOrigin}'"
          DEFAULT_FROM_EMAIL: "{{resolve:ssm:/prod/portfolio/parameter/default_from_email}}"
          DEFAULT_TO_EMAIL: "{{resolve:ssm:/prod/portfolio/parameter/default_to_mail}}"
          EMAIL_HOST: "{{resolve:ssm:/prod/portfolio/parameter/email_host}}"
          EMAIL_PORT: "{{resolve:ssm:/prod/portfolio/parameter/email_port}}"
      Events:
        GetEndpoint:
          Type: Api
          Properties:
            RestApiId: !Ref DjangoApi
            Path: /
            Method: GET
        PostEndpoint:
          Type: Api
          Properties:
            RestApiId: !Ref DjangoApi
            Path: /
            Method: POST
        ProxyGet:
          Type: Api
          Properties:
            RestApiId: !Ref DjangoApi
            Path: /{proxy+}
            Method: GET
        ProxyPost:
          Type: Api
          Properties:
            RestApiId: !Ref DjangoApi
            Path: /{proxy+}
            Method: POST
        ProxyOptions:
          Type: Api
          Properties:
            RestApiId: !Ref DjangoApi
            Path: /{proxy+}
            Method: OPTIONS
    Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: arn:aws:secretsmanager:ap-northeast-1:864454139429:secret:prod/portfolio/secret-*
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource: arn:aws:ssm:ap-northeast-1:864454139429:parameter/prod/portfolio/parameter/*
    Tags:
      - Key: env
        Value: !Ref Env
      - Key: app
        Value: portfolio
      - Key: service
        Value: lambda
  
  DjangoApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !If [IsProd, prod, dev]
      Name: CobaemonServerlessPortfolioApi
      Cors:
        AllowOrigin: !Sub "'${AllowedOrigin}'"
        AllowMethods: "'GET,POST,OPTIONS'"

  ApiCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref AllowedHosts
      ValidationMethod: DNS

  ApiGatewayCustomDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref AllowedHosts
      RegionalCertificateArn: !Ref ApiCertificate
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiGatewayBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref ApiGatewayCustomDomain
      RestApiId: !Ref DjangoApi
      Stage: !If [IsProd, prod, dev]
      BasePath: ""

  ApiGatewayRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: portfolio.cobaemon.com.
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApiGatewayCustomDomain.RegionalDomainName
        HostedZoneId: !GetAtt ApiGatewayCustomDomain.RegionalHostedZoneId

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${CodePipelineName}-CodeBuildRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub "arn:aws:s3:::${S3Bucket}"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"
      Tags:
        - Key: env
          Value: !Ref Env
        - Key: app
          Value: portfolio
        - Key: service
          Value: role

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${CodePipelineName}-ServiceRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelineMinimalAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub "arn:aws:s3:::${S3Bucket}"
                  - !Sub "arn:aws:s3:::${S3Bucket}/*"
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource: !GetAtt CodeBuildProject.Arn
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackResources
                  - cloudformation:ValidateTemplate
                Resource: "*"
              - Effect: Allow
                Action:
                  - acm:RequestCertificate
                  - acm:DescribeCertificate
                Resource: arn:aws:acm:ap-northeast-1:864454139429:certificate/*
      Tags:
        - Key: env
          Value: !Ref Env
        - Key: app
          Value: portfolio
        - Key: service
          Value: role

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${CodePipelineName}-Build"
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:6.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ENV
            Value: !Ref Env
          - Name: S3Bucket
            Value: !Ref S3Bucket
      Source:
        Type: CODEPIPELINE
      Artifacts:
        Type: CODEPIPELINE
      Tags:
        - Key: env
          Value: !Ref Env
        - Key: app
          Value: portfolio
        - Key: service
          Value: codebuild

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref CodePipelineName
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref S3Bucket
      Stages:
        - Name: Source
          Actions:
            - Name: CodeConnectionsSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: '1'
              Configuration:
                ConnectionArn: "arn:aws:codeconnections:ap-northeast-1:864454139429:connection/fcbb3ce3-d1c2-4b93-89e5-ac0f45ae943f"
                FullRepositoryId: !Ref FullRepositoryId
                BranchName: !Ref BranchName
              OutputArtifacts:
                - Name: SourceOutput
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: CodeBuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref CodeBuildProject
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: CloudFormationDeploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND,CAPABILITY_NAMED_IAM
                StackName: !Ref StackName
                TemplatePath: !Join ["", ["BuildOutput::", !Ref TemplatePath]]
                OutputFileName: output.json
              RunOrder: 1
      Tags:
        - Key: env
          Value: !Ref Env
        - Key: app
          Value: portfolio
        - Key: service
          Value: codepipeline

  WAFWebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: CobaemonServerlessPortfolioWebACL
      Scope: REGIONAL
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: DjangoPortfolioWebACL
      Rules:
        - Name: AWSManagedRulesCommonRuleSet
          Priority: 0
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWSManagedRulesCommonRuleSet
        - Name: AWSManagedRulesSQLiRuleSet
          Priority: 1
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesSQLiRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWSManagedRulesSQLiRuleSet
        - Name: AWSManagedRulesKnownBadInputsRuleSet
          Priority: 2
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesKnownBadInputsRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWSManagedRulesKnownBadInputsRuleSet
        - Name: AWSManagedRulesAmazonIpReputationList
          Priority: 3
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesAmazonIpReputationList
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWSManagedRulesAmazonIpReputationList
        - Name: AWSManagedRulesBotControlRuleSet
          Priority: 4
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesBotControlRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWSManagedRulesBotControlRuleSet
      Tags:
        - Key: env
          Value: !Ref Env
        - Key: app
          Value: portfolio
        - Key: service
          Value: waf

  WAFWebACLAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    DependsOn: DjangoApiStage
    Properties:
      WebACLArn: !GetAtt WAFWebACL.Arn
      ResourceArn: !If 
        - IsProd
        - !Sub "arn:aws:apigateway:${AWS::Region}::/restapis/${DjangoApi}/stages/prod"
        - !Sub "arn:aws:apigateway:${AWS::Region}::/restapis/${DjangoApi}/stages/dev"

Outputs:
  ApiUrl:
    Description: "The URL of the API Gateway"
    Value: !Ref DjangoApi
  PipelineName:
    Description: "The name of the created CodePipeline."
    Value: !Ref CodePipeline
