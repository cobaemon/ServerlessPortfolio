AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: CodePipeline for Serverless Portfolio using SAM

Globals:
  Function:
    Timeout: 30

Parameters:
  Env:
    Type: String
    Description: "Deployment environment (dev or prod)"
    Default: prod
    AllowedValues:
      - dev
      - prod
  AllowedOrigin:
    Type: AWS::SSM::Parameter::Value<String>
    Description: "The allowed origin for CORS and CSRF protection (e.g. https://example.com)"
    Default: /prod/portfolio/parameter/csrf_trusted_origins
  AllowedHosts:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /prod/portfolio/parameter/allowed_hosts
  HostedZoneId:
    Type: String
    Description: "Route53 Hosted Zone ID for custom domain"
  DomainName:
    Type: String
    Default: serverless.portfolio.cobaemon.com
  ExistingARecord:
    Type: String
    Description: "Whether an existing A record exists (true/false)"
    Default: "false"
    AllowedValues:
      - "true"
      - "false"

Conditions:
  IsProd: !Equals [ !Ref Env, prod ]
  CreateARecord: !Equals [ !Ref ExistingARecord, "false" ]

Mappings:
  EnvMapping:
    dev:
      SettingsModule: "config.settings.dev"
    prod:
      SettingsModule: "config.settings.prod"

Resources:
  DjangoFunction:
    Type: AWS::Serverless::Function
    Properties:
      # FunctionName: CobaemonServerlessPortfolioFunction
      Handler: asgi_lambda.handler
      Runtime: python3.12
      CodeUri: ./
      Environment:
        Variables:
          DJANGO_SETTINGS_MODULE: !FindInMap [EnvMapping, !Ref Env, SettingsModule]
          DJANGO_SECRET_KEY: "{{resolve:secretsmanager:prod/portfolio/secret:SecretString:DJANGO_SECRET_KEY}}"
          EMAIL_HOST_USER: "{{resolve:secretsmanager:prod/portfolio/secret:SecretString:EMAIL_HOST_USER}}"
          EMAIL_HOST_PASSWORD: "{{resolve:secretsmanager:prod/portfolio/secret:SecretString:EMAIL_HOST_PASSWORD}}"
          GOOGLE_CLIENT_ID: "{{resolve:secretsmanager:prod/portfolio/secret:SecretString:GOOGLE_CLIENT_ID}}"
          GOOGLE_CLIENT_SECRET: "{{resolve:secretsmanager:prod/portfolio/secret:SecretString:GOOGLE_CLIENT_SECRET}}"
          GITHUB_CLIENT_ID: "{{resolve:secretsmanager:prod/portfolio/secret:SecretString:GITHUB_CLIENT_ID}}"
          GITHUB_CLIENT_SECRET: "{{resolve:secretsmanager:prod/portfolio/secret:SecretString:GITHUB_CLIENT_SECRET}}"
          ALLOWED_HOSTS: !Sub "{{resolve:ssm:/${Env}/portfolio/parameter/allowed_hosts}}"
          CSRF_TRUSTED_ORIGINS: !Sub "'${AllowedOrigin}'"
          DEFAULT_FROM_EMAIL: "{{resolve:ssm:/prod/portfolio/parameter/default_from_email}}"
          DEFAULT_TO_EMAIL: "{{resolve:ssm:/prod/portfolio/parameter/default_to_mail}}"
          EMAIL_HOST: "{{resolve:ssm:/prod/portfolio/parameter/email_host}}"
          EMAIL_PORT: "{{resolve:ssm:/prod/portfolio/parameter/email_port}}"
          EMAIL_USE_TLS: "{{resolve:ssm:/prod/portfolio/parameter/email_use_tls}}"
          EMAIL_USE_SSL: "{{resolve:ssm:/prod/portfolio/parameter/email_use_ssl}}"
          STATIC_URL: !Sub "https://${CloudFrontDistribution.DomainName}/"
          CLOUDFRONT_DOMAIN_NAME: !GetAtt CloudFrontDistribution.DomainName
          LOG_LEVEL: !Sub "{{resolve:ssm:/${Env}/portfolio/parameter/log_level}}"
          ENV: !Ref Env
      Events:
        GetEndpoint:
          Type: Api
          Properties:
            RestApiId: !Ref DjangoApi
            Path: /
            Method: GET
        PostEndpoint:
          Type: Api
          Properties:
            RestApiId: !Ref DjangoApi
            Path: /
            Method: POST
        ProxyGet:
          Type: Api
          Properties:
            RestApiId: !Ref DjangoApi
            Path: /{proxy+}
            Method: GET
        ProxyPost:
          Type: Api
          Properties:
            RestApiId: !Ref DjangoApi
            Path: /{proxy+}
            Method: POST
        ProxyOptions:
          Type: Api
          Properties:
            RestApiId: !Ref DjangoApi
            Path: /{proxy+}
            Method: OPTIONS
    Policies:
      - AWSLambdaBasicExecutionRole
      - SecretsManagerReadWrite
      - Statement:
        Effect: Allow
        Action:
          - s3:GetObject
          - s3:ListBucket
        Resource:
          - !Sub "arn:aws:s3:::cobaemon-serverless-portfolio-${Env}-static"
          - !Sub "arn:aws:s3:::cobaemon-serverless-portfolio-${Env}-static/*"
    Tags:
      - Key: env
        Value: !Ref Env
      - Key: app
        Value: portfolio
      - Key: service
        Value: lambda
  
  DjangoApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !If [IsProd, prod, dev]
      Name: CobaemonServerlessPortfolioApi
      Cors:
        AllowOrigin: !Sub "'${AllowedOrigin}'"
        AllowMethods: "'GET,POST,OPTIONS'"

  ServerlessCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId

  ApiGatewayCustomDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref DomainName
      RegionalCertificateArn: !Ref ServerlessCertificate
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiGatewayBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn:
    - DjangoApiStage
    Properties:
      DomainName: !Ref ApiGatewayCustomDomain
      RestApiId: !Ref DjangoApi
      Stage: !If [IsProd, prod, dev]
      BasePath: ""

  ApiGatewayRecordSet:
    Type: AWS::Route53::RecordSet
    Condition: CreateARecord
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub "${DomainName}."
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApiGatewayCustomDomain.RegionalDomainName
        HostedZoneId: !GetAtt ApiGatewayCustomDomain.RegionalHostedZoneId

  # WAF設定（セキュリティ強化が必要な場合に有効化）
  # WAFWebACL:
  #   Type: AWS::WAFv2::WebACL
  #   Properties:
  #     Name: CobaemonServerlessPortfolioWebACL
  #     Scope: REGIONAL
  #     DefaultAction:
  #       Allow: {}
  #     VisibilityConfig:
  #       SampledRequestsEnabled: true
  #       CloudWatchMetricsEnabled: true
  #       MetricName: DjangoPortfolioWebACL
  #     Rules:
  #       - Name: AWSManagedRulesCommonRuleSet
  #         Priority: 0
  #         OverrideAction:
  #           None: {}
  #         Statement:
  #           ManagedRuleGroupStatement:
  #             VendorName: AWS
  #             Name: AWSManagedRulesCommonRuleSet
  #         VisibilityConfig:
  #           SampledRequestsEnabled: true
  #           CloudWatchMetricsEnabled: true
  #           MetricName: AWSManagedRulesCommonRuleSet
  #       - Name: AWSManagedRulesSQLiRuleSet
  #         Priority: 1
  #         OverrideAction:
  #           None: {}
  #         Statement:
  #           ManagedRuleGroupStatement:
  #             VendorName: AWS
  #             Name: AWSManagedRulesSQLiRuleSet
  #         VisibilityConfig:
  #           SampledRequestsEnabled: true
  #           CloudWatchMetricsEnabled: true
  #           MetricName: AWSManagedRulesSQLiRuleSet
  #       - Name: AWSManagedRulesKnownBadInputsRuleSet
  #         Priority: 2
  #         OverrideAction:
  #           None: {}
  #         Statement:
  #           ManagedRuleGroupStatement:
  #             VendorName: AWS
  #             Name: AWSManagedRulesKnownBadInputsRuleSet
  #         VisibilityConfig:
  #           SampledRequestsEnabled: true
  #           CloudWatchMetricsEnabled: true
  #           MetricName: AWSManagedRulesKnownBadInputsRuleSet
  #       - Name: AWSManagedRulesAmazonIpReputationList
  #         Priority: 3
  #         OverrideAction:
  #           None: {}
  #         Statement:
  #           ManagedRuleGroupStatement:
  #             VendorName: AWS
  #             Name: AWSManagedRulesAmazonIpReputationList
  #         VisibilityConfig:
  #           SampledRequestsEnabled: true
  #           CloudWatchMetricsEnabled: true
  #           MetricName: AWSManagedRulesAmazonIpReputationList
  #       - Name: AWSManagedRulesBotControlRuleSet
  #         Priority: 4
  #         OverrideAction:
  #           None: {}
  #         Statement:
  #           ManagedRuleGroupStatement:
  #             VendorName: AWS
  #             Name: AWSManagedRulesBotControlRuleSet
  #         VisibilityConfig:
  #           SampledRequestsEnabled: true
  #           CloudWatchMetricsEnabled: true
  #           MetricName: AWSManagedRulesBotControlRuleSet
  #     Tags:
  #       - Key: env
  #         Value: !Ref Env
  #       - Key: app
  #         Value: portfolio
  #       - Key: service
  #         Value: waf

  # WAFWebACLAssociation:
  #   Type: AWS::WAFv2::WebACLAssociation
  #   DependsOn: DjangoApiStage
  #   Properties:
  #     WebACLArn: !GetAtt WAFWebACL.Arn
  #     ResourceArn: !If 
  #       - IsProd
  #       - !Sub "arn:aws:apigateway:${AWS::Region}::/restapis/${DjangoApi}/stages/prod"
  #       - !Sub "arn:aws:apigateway:${AWS::Region}::/restapis/${DjangoApi}/stages/dev"

  # 静的ファイル配信用S3バケット（dependencies.yamlで管理）
  # 以下のリソースは dependencies.yaml で定義されているため、ここではコメントアウト
  # StaticFilesBucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: !Sub "cobaemon-serverless-portfolio-${Env}"
  #     PublicAccessBlockConfiguration:
  #       BlockPublicAcls: true
  #       BlockPublicPolicy: true
  #       IgnorePublicAcls: true
  #       RestrictPublicBuckets: true

  # CloudFrontからS3へのアクセスを許可するOriginAccessControl（dependencies.yamlで管理）
  # CloudFrontOriginAccessControl:
  #   Type: AWS::CloudFront::OriginAccessControl
  #   Properties:
  #     OriginAccessControlConfig:
  #       Name: !Sub "OAC for ${StaticFilesBucket}"
  #       OriginAccessControlOriginType: s3
  #       SigningBehavior: always
  #       SigningProtocol: sigv4

  # S3バケットポリシー（CloudFrontからのアクセスのみ許可）（dependencies.yamlで管理）
  # StaticFilesBucketPolicy:
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #     Bucket: !Ref StaticFilesBucket
  #     PolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Sid: AllowCloudFrontServicePrincipal
  #           Effect: Allow
  #           Principal:
  #             Service: cloudfront.amazonaws.com
  #           Action: s3:GetObject
  #           Resource: !Sub "arn:aws:s3:::${StaticFilesBucket}/*"
  #           Condition:
  #             StringEquals:
  #               "AWS:SourceArn": !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"

  # CloudFrontディストリビューション（静的ファイル配信用）
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: !Sub "S3-cobaemon-serverless-portfolio-${Env}-static"
            DomainName: !Sub "cobaemon-serverless-portfolio-${Env}-static.s3.${AWS::Region}.amazonaws.com"
            S3OriginConfig:
              OriginAccessIdentity: ""
            OriginAccessControlId:
              Fn::ImportValue:
                Fn::Sub: "cobaemon-portfolio-${Env}-oac-id"
        Enabled: true
        DefaultRootObject: index.html
        HttpVersion: http2and3
        DefaultCacheBehavior:
          TargetOriginId: !Sub "S3-cobaemon-serverless-portfolio-${Env}-static"
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized

Outputs:
  ApiUrl:
    Description: "The URL of the API Gateway"
    Value: !Ref DjangoApi
  CloudFrontDistributionId:
    Description: "CloudFront Distribution ID for OAC bucket policy"
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub "cobaemon-portfolio-${Env}-distribution-id"
