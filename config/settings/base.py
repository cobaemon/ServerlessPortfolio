"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from csp import constants as csp_constants

from django.contrib import messages
from django.urls import reverse_lazy

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ''

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic',
    'django.contrib.staticfiles',
    'csp',

    'django.contrib.sites',
    # 'allauth',
    # 'allauth.account',
    # 'allauth.socialaccount',
    # 'allauth.socialaccount.providers.google',
    # 'allauth.socialaccount.providers.github',

    # 'django_otp',
    # 'django_otp.plugins.otp_totp',

    # 'accounts',
    'portfolio',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'csp.middleware.CSPMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    # 'allauth.account.middleware.AccountMiddleware',
    # 'django_otp.middleware.OTPMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
            # os.path.join(BASE_DIR, 'accounts/templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'csp.context_processors.nonce',
            ],
            'libraries':          {
                'csp': 'csp.templatetags.csp',
            }
        },
    },
]
print("Django is looking for templates in:", os.path.join(BASE_DIR, 'templates'))

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# 対応する言語を指定
LANGUAGES = [
    ('ja', 'Japanese'),
    ('en', 'English'),
    ('fr', 'French'),
    ('es', 'Spanish'),
    ('ru', 'Russian'),
    ('zh-hans', 'Simplified Chinese'),
    ('ar', 'Arabic'),
]

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CONTENT_SECURITY_POLICY = {
    'DIRECTIVES': {
        'default-src': ["'self'", 'https:'],
        'script-src': [
            "'self'",
            'https://use.fontawesome.com',
            'https://cdn.jsdelivr.net',
            'https://cdn.startbootstrap.com',
            csp_constants.NONCE,
        ],
        'script-src-elem': [
            "'self'",
            'https://use.fontawesome.com',
            'https://cdn.jsdelivr.net',
            'https://cdn.startbootstrap.com',
            csp_constants.NONCE,
        ],
        'style-src': [
            "'self'",
            'https://fonts.googleapis.com',
            'https://use.fontawesome.com',
            'https://cdn.jsdelivr.net',
            'https://cdn.startbootstrap.com',
            csp_constants.NONCE,
        ],
        'style-src-elem': [
            "'self'",
            'https://fonts.googleapis.com',
            'https://use.fontawesome.com',
            'https://cdn.jsdelivr.net',
            'https://cdn.startbootstrap.com',
            csp_constants.NONCE,
        ],
        'font-src': ["'self'", 'https://fonts.gstatic.com'],
        'img-src': ["'self'", 'data:'],
        'object-src': ["'none'"],
        'base-uri': ["'self'"],
        'frame-src': ["'none'"],
        'frame-ancestors': ["'none'"],
        'report-uri': ['/csp-report-endpoint'],
    }
}

# Django Allauth設定
# SITE_ID = 1

# カスタムユーザ
# AUTH_USER_MODEL = 'accounts.CustomUser'
# AUTHENTICATION_BACKENDS = [
#     'django.contrib.auth.backends.ModelBackend',
#     'allauth.account.auth_backends.AuthenticationBackend',
#     'accounts.auth_backends.CustomBackend',
# ]

# # メール認証を必須にする設定
# ACCOUNT_LOGIN_METHODS = ['email']        
# ACCOUNT_SIGNUP_FIELDS = ['email*', 'password'] 

# # メールアドレスに関する設定
# ACCOUNT_UNIQUE_EMAIL = True               
# ACCOUNT_EMAIL_VERIFICATION = 'mandatory'  
# ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1

# # リダイレクト設定
# # ユーザーがログインした後にリダイレクトされるURL
# LOGIN_REDIRECT_URL = reverse_lazy('portfolio:top')
# # ユーザーがログアウトした後にリダイレクトされるURL
# LOGOUT_REDIRECT_URL = LOGIN_REDIRECT_URL
# # メール確認が成功した後、ログインしていないユーザーがリダイレクトされるURL
# ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = reverse_lazy('account_login')
# # メール確認が成功した後、ログインしているユーザーがリダイレクトされるURL
# ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = reverse_lazy('account_email')
# # パスワードリセットが成功した後にリダイレクトされるURL
# ACCOUNT_PASSWORD_RESET_REDIRECT_URL = reverse_lazy('account_password_reset_done')
# # パスワード変更が成功した後にリダイレクトされるURL
# ACCOUNT_PASSWORD_CHANGE_REDIRECT_URL = LOGIN_REDIRECT_URL
# # 新規登録が成功した後にリダイレクトされるURL
# ACCOUNT_SIGNUP_REDIRECT_URL = reverse_lazy('account_verification_sent')

# # Custom
# SITE_NAME = 'Cobaemon Portfolio'
# APPEND_SLASH = True

# MESSAGE_TAGS = {
#     messages.DEBUG: 'debug',
#     messages.INFO: 'info',
#     messages.SUCCESS: 'success',
#     messages.WARNING: 'warning',
#     messages.ERROR: 'danger',
# }

# SOCIALACCOUNT_ADAPTER = 'accounts.adapters.MySocialAccountAdapter'
