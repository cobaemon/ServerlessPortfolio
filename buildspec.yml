version: 0.2

env:
  variables:
    DJANGO_SETTINGS_MODULE: "config.settings.prod"
    ENV: "prod"
    
  # AWS Secrets Managerから取得する機密情報の定義
  secrets-manager:
    DJANGO_SECRET_KEY: "prod/portfolio/secret:DJANGO_SECRET_KEY"
    EMAIL_HOST_USER: "prod/portfolio/secret:EMAIL_HOST_USER"
    EMAIL_HOST_PASSWORD: "prod/portfolio/secret:EMAIL_HOST_PASSWORD"
    GOOGLE_CLIENT_ID: "prod/portfolio/secret:GOOGLE_CLIENT_ID"
    GOOGLE_CLIENT_SECRET: "prod/portfolio/secret:GOOGLE_CLIENT_SECRET"
    GITHUB_CLIENT_ID: "prod/portfolio/secret:GITHUB_CLIENT_ID"
    GITHUB_CLIENT_SECRET: "prod/portfolio/secret:GITHUB_CLIENT_SECRET"

  # AWS Systems Manager Parameter Storeから取得する設定値の定義
  parameter-store:
    ALLOWED_HOSTS: "/prod/portfolio/parameter/allowed_hosts"
    CSRF_TRUSTED_ORIGINS: "/prod/portfolio/parameter/csrf_trusted_origins"
    DEFAULT_FROM_EMAIL: "/prod/portfolio/parameter/default_from_email"
    DEFAULT_TO_EMAIL: "/prod/portfolio/parameter/default_to_mail"
    EMAIL_HOST: "/prod/portfolio/parameter/email_host"
    EMAIL_PORT: "/prod/portfolio/parameter/email_port"
    EMAIL_USE_TLS: "/prod/portfolio/parameter/email_use_tls"
    EMAIL_USE_SSL: "/prod/portfolio/parameter/email_use_ssl"

phases:
  install:
    runtime-versions:
      python: 3.12
    commands:
      - echo "依存関係のインストールを開始..."
      - pip install --upgrade pip
      - pip install -r requirements.txt
      - pip install aws-sam-cli
      - pip install csscompressor
  pre_build:
    commands:
      - echo "SAMビルドの準備を開始..."
      # env_vars.txt が存在しない場合に備えて初期化
      - echo "EXISTING_ARECORD=false" > env_vars.txt
      
      # 既存のRoute53 Aレコードを検出
      - echo "既存のRoute53 Aレコードを検出中..."
      - |
        DOMAIN_NAME="serverless.portfolio.cobaemon.com"
        ROOT_DOMAIN=$(echo $DOMAIN_NAME | awk -F'.' '{print $(NF-1)"."$NF}')
        HOSTED_ZONE_ID=$(aws route53 list-hosted-zones-by-name \
          --dns-name "$ROOT_DOMAIN" \
          --query 'HostedZones[0].Id' --output text | awk -F/ '{print $3}')

        if [ -z "$HOSTED_ZONE_ID" ] || [ "$HOSTED_ZONE_ID" = "None" ]; then
          echo "Hosted zone not found for $ROOT_DOMAIN" >&2
          exit 1
        fi

        echo "HOSTED_ZONE_ID=$HOSTED_ZONE_ID" >> env_vars.txt

        STACK_NAME="cobaemon-serverless-portfolio-stack"
        CFN_RECORD=$(aws cloudformation describe-stack-resource \
          --stack-name $STACK_NAME \
          --logical-resource-id ApiGatewayRecordSet \
          --query 'StackResourceDetail.PhysicalResourceId' \
          --output text 2>/dev/null || true)

        if [ "$CFN_RECORD" != "None" ] && [ -n "$CFN_RECORD" ]; then
          echo "Stack already manages A record: $CFN_RECORD"
          echo "EXISTING_ARECORD=false" >> env_vars.txt
        else
          EXISTING_RECORD=$(aws route53 list-resource-record-sets \
            --hosted-zone-id $HOSTED_ZONE_ID \
            --query "ResourceRecordSets[?Name=='$DOMAIN_NAME.' && Type=='A']" \
            --output text)

          if [ -n "$EXISTING_RECORD" ]; then
            echo "A record exists outside CloudFormation: $DOMAIN_NAME"
            echo "EXISTING_ARECORD=true" >> env_vars.txt
          else
            echo "No existing A record found. It will be created by the stack."
            echo "EXISTING_ARECORD=false" >> env_vars.txt
          fi
        fi
      
      # 多言語対応のための翻訳ファイル処理
      - echo "ロケールディレクトリの設定..."
      - mkdir -p locale
      
      # テンプレートファイルの存在確認後に翻訳ファイルを生成・コンパイル
      - echo "翻訳ファイルの生成とコンパイルを開始..."
      - |
        if [ -f "templates/portfolio_base.html" ]; then
          echo "テンプレートファイルを発見、翻訳ファイルを生成中..."
          python manage.py makemessages -l ja --ignore=venv --ignore=.venv --ignore=node_modules || echo "日本語翻訳ファイルの生成に失敗しましたが、処理を継続します..."
          python manage.py makemessages -l en --ignore=venv --ignore=.venv --ignore=node_modules || echo "英語翻訳ファイルの生成に失敗しましたが、処理を継続します..."
          python manage.py makemessages -l fr --ignore=venv --ignore=.venv --ignore=node_modules || echo "フランス語翻訳ファイルの生成に失敗しましたが、処理を継続します..."
          python manage.py makemessages -l es --ignore=venv --ignore=.venv --ignore=node_modules || echo "スペイン語翻訳ファイルの生成に失敗しましたが、処理を継続します..."
          python manage.py makemessages -l ru --ignore=venv --ignore=.venv --ignore=node_modules || echo "ロシア語翻訳ファイルの生成に失敗しましたが、処理を継続します..."
          python manage.py makemessages -l zh-hans --ignore=venv --ignore=.venv --ignore=node_modules || echo "中国語翻訳ファイルの生成に失敗しましたが、処理を継続します..."
          python manage.py makemessages -l ar --ignore=venv --ignore=.venv --ignore=node_modules || echo "アラビア語翻訳ファイルの生成に失敗しましたが、処理を継続します..."
          python manage.py compilemessages || echo "翻訳ファイルのコンパイルに失敗しましたが、処理を継続します..."
        else
          echo "テンプレートファイルが見つからないため、翻訳ファイルの生成をスキップします"
        fi
        
      # フォントをダウンロードして配置
      - mkdir -p portfolio/static/assets/fonts
      - curl -L -o portfolio/static/assets/fonts/Montserrat.ttf https://github.com/google/fonts/raw/main/ofl/montserrat/Montserrat-Regular.ttf
      - curl -L -o portfolio/static/assets/fonts/Lato.ttf https://github.com/google/fonts/raw/main/ofl/lato/Lato-Regular.ttf

      # CSS minification
      - |
        python - <<'EOF'
        import pathlib, csscompressor
        src = pathlib.Path('portfolio/static/css/styles.css').read_text()
        pathlib.Path('portfolio/static/css/styles.min.css').write_text(csscompressor.compress(src))
        EOF

      # 静的ファイルの収集とS3への同期
      - python manage.py collectstatic --noinput
      - python manage.py render_static
      - echo "静的ファイルをS3に同期中..."
      - BUCKET_NAME="cobaemon-serverless-portfolio-${ENV}-static"
      - aws s3 sync staticfiles/ s3://${BUCKET_NAME}/ --delete
  build:
    commands:
      - echo "SAMビルドを実行中..."
      - sam build --use-container
  post_build:
    commands:
      - echo "SAMパッケージングを実行中..."
      # 環境変数を読み込み
      - if [ -f env_vars.txt ]; then . ./env_vars.txt; fi
      - 'echo "EXISTING_ARECORD: $EXISTING_ARECORD"'
      - sam package --output-template-file packaged.yaml --s3-bucket $S3Bucket
      # パラメータファイルを作成
      - |
        cat > parameters.json <<EOF
        {
          "Parameters": {
            "Env": "$ENV",
            "ExistingARecord": "$EXISTING_ARECORD",
            "HostedZoneId": "$HOSTED_ZONE_ID"
          }
        }
        EOF
      - echo "パラメータファイルを作成しました:"
      - cat parameters.json
      # バケットポリシー用のパラメータファイルを作成
      - |
        cat > bucketpolicy-parameters.json <<EOF
        {
          "Parameters": {
            "Env": "$ENV"
          }
        }
        EOF
      - echo "バケットポリシーパラメータファイルを作成しました:"
      - cat bucketpolicy-parameters.json

artifacts:
  files:
    - packaged.yaml
    - parameters.json
    - bucketpolicy.yaml
    - bucketpolicy-parameters.json
