version: 0.2

env:
  variables:
    DJANGO_SETTINGS_MODULE: "config.settings.prod"
    ENV: "prod"
    
  # AWS Secrets Managerから取得する機密情報の定義
  secrets-manager:
    DJANGO_SECRET_KEY: "prod/portfolio/secret:DJANGO_SECRET_KEY"
    EMAIL_HOST_USER: "prod/portfolio/secret:EMAIL_HOST_USER"
    EMAIL_HOST_PASSWORD: "prod/portfolio/secret:EMAIL_HOST_PASSWORD"
    GOOGLE_CLIENT_ID: "prod/portfolio/secret:GOOGLE_CLIENT_ID"
    GOOGLE_CLIENT_SECRET: "prod/portfolio/secret:GOOGLE_CLIENT_SECRET"
    GITHUB_CLIENT_ID: "prod/portfolio/secret:GITHUB_CLIENT_ID"
    GITHUB_CLIENT_SECRET: "prod/portfolio/secret:GITHUB_CLIENT_SECRET"

  # AWS Systems Manager Parameter Storeから取得する設定値の定義
  parameter-store:
    ALLOWED_HOSTS: "/prod/portfolio/parameter/allowed_hosts"
    CSRF_TRUSTED_ORIGINS: "/prod/portfolio/parameter/csrf_trusted_origins"
    DEFAULT_FROM_EMAIL: "/prod/portfolio/parameter/default_from_email"
    DEFAULT_TO_EMAIL: "/prod/portfolio/parameter/default_to_mail"
    EMAIL_HOST: "/prod/portfolio/parameter/email_host"
    EMAIL_PORT: "/prod/portfolio/parameter/email_port"

phases:
  install:
    runtime-versions:
      python: 3.12
    commands:
      - echo "依存関係のインストールを開始..."
      - pip install --upgrade pip
      - pip install -r requirements.txt
      - pip install aws-sam-cli
  pre_build:
    commands:
      - echo "SAMビルドの準備を開始..."
      # env_vars.txt が存在しない場合に備えて初期化
      - echo "EXISTING_ARECORD=false" > env_vars.txt
      
      # 既存のRoute53 Aレコードを検出
      - echo "既存のRoute53 Aレコードを検出中..."
      - |
        DOMAIN_NAME="serverless.portfolio.cobaemon.com"
        HOSTED_ZONE_ID=$(aws ssm get-parameter --name "/portfolio/parameter/hostzoneid" --query "Parameter.Value" --output text)
        
        # 既存のAレコードを検索
        EXISTING_RECORD=$(aws route53 list-resource-record-sets \
          --hosted-zone-id $HOSTED_ZONE_ID \
          --query "ResourceRecordSets[?Name=='$DOMAIN_NAME.' && Type=='A']" \
          --output text)
        
        if [ -n "$EXISTING_RECORD" ]; then
          echo "既存のAレコードを検出しました: $DOMAIN_NAME"
          echo "EXISTING_ARECORD=true" >> env_vars.txt
        else
          echo "既存のAレコードが見つかりませんでした。新規作成します。"
          echo "EXISTING_ARECORD=false" >> env_vars.txt
        fi
      
      # 多言語対応のための翻訳ファイル処理
      - echo "ロケールディレクトリの設定..."
      - mkdir -p locale
      
      # テンプレートファイルの存在確認後に翻訳ファイルを生成・コンパイル
      - echo "翻訳ファイルの生成とコンパイルを開始..."
      - |
        if [ -f "templates/portfolio_base.html" ]; then
          echo "テンプレートファイルを発見、翻訳ファイルを生成中..."
          python manage.py makemessages -l ja --ignore=venv --ignore=.venv --ignore=node_modules || echo "日本語翻訳ファイルの生成に失敗しましたが、処理を継続します..."
          python manage.py makemessages -l en --ignore=venv --ignore=.venv --ignore=node_modules || echo "英語翻訳ファイルの生成に失敗しましたが、処理を継続します..."
          python manage.py makemessages -l fr --ignore=venv --ignore=.venv --ignore=node_modules || echo "フランス語翻訳ファイルの生成に失敗しましたが、処理を継続します..."
          python manage.py makemessages -l es --ignore=venv --ignore=.venv --ignore=node_modules || echo "スペイン語翻訳ファイルの生成に失敗しましたが、処理を継続します..."
          python manage.py makemessages -l ru --ignore=venv --ignore=.venv --ignore=node_modules || echo "ロシア語翻訳ファイルの生成に失敗しましたが、処理を継続します..."
          python manage.py makemessages -l zh-hans --ignore=venv --ignore=.venv --ignore=node_modules || echo "中国語翻訳ファイルの生成に失敗しましたが、処理を継続します..."
          python manage.py makemessages -l ar --ignore=venv --ignore=.venv --ignore=node_modules || echo "アラビア語翻訳ファイルの生成に失敗しましたが、処理を継続します..."
          python manage.py compilemessages || echo "翻訳ファイルのコンパイルに失敗しましたが、処理を継続します..."
        else
          echo "テンプレートファイルが見つからないため、翻訳ファイルの生成をスキップします"
        fi
        
      # 静的ファイルの収集とS3への同期
      - python manage.py collectstatic --noinput
      - echo "静的ファイルをS3に同期中..."
      - BUCKET_NAME="cobaemon-serverless-portfolio-${ENV}-static"
      - aws s3 sync staticfiles/ s3://${BUCKET_NAME}/ --delete
  build:
    commands:
      - echo "SAMビルドを実行中..."
      - sam build --use-container
  post_build:
    commands:
      - echo "SAMパッケージングを実行中..."
      # 環境変数を読み込み
      - if [ -f env_vars.txt ]; then . env_vars.txt; fi
      - 'echo "EXISTING_ARECORD: $EXISTING_ARECORD"'
      - sam package --output-template-file packaged.yaml --s3-bucket $S3Bucket
      # パラメータファイルを作成
      - |
        cat > parameters.json <<EOF
        {
          "Parameters": {
            "Env": "$ENV",
            "ExistingARecord": "$EXISTING_ARECORD"
          }
        }
        EOF
      - echo "パラメータファイルを作成しました:"
      - cat parameters.json

artifacts:
  files:
    - packaged.yaml
    - parameters.json
